Java?
------

->Platform independence 
  Compile once + Run AnyTime
->Object Oriented LANGUAGE (OOPS):
 ex: Java, .net, python
OOPS defines the common rule/regulations/guidelines for writing better progs.
 :Modularity 
 :Reusability
 :Easy to understand and easy to represent any complex model
 :Future enhancements
->Simple,easy to learn/ understand /code..
->Robust:
  No pointers . [gives access to the memory location]
  Memory allocation & memory deallocation is taken care by java
  Unused memory is cleanup using garbage collection.
  Java is very strong in type checking.  [Compilation]
  Exception handling at the run time.[to handle the unexpected scenarios that occurs at run time]
->Arhitecural neutral:  Java memory allocation is stable for all platforms.
->MultiThreading : To execute multiple progs at the same time. ex: response time.


->Diff apps:
  standalone app/desktop app
  web app
  web services
  enterprise apps
  mobile
  gaming
  Machine learning , AI , embedded apps ..etc....
  tools : selenium , hybris , oracle ATG, Pega
  frameworks: springs , hibernate

 

Setup:
-----
1. download and Install  java8
2. download and install eclipse 
  
https://drive.google.com/drive/folders/1qEYiff8p6216-CFwa_9yu_AF44M8NkQB

3. set path for java jdk path :
open commnad promot and type:
a. javac  -> jdk is available
b. java   -> jre is available

copy the path "C:\Program Files\Java\jdk1.8.0_231\bin"
and add the jdk bin location to the environment variable "path".


How to check JDK is installed?
try "javac" command in command window


How to check JRE is installed?
try "java" command in command window


How to check java version?
java -version


  Java: JDK + JRE
  JDK -> Commands + lib for compilations
  JRE -> commands for execution
  
  In every server we have the application running & testers will do testings on these systems.
  Dev1  --->     TS1    -->    TS2 -->     TS3 -->     PRE-PRD --->     Live  [consumed by customers]   
  JDK+JRE        JRE          JRE          JRE          JRE              JRE
  
 SET PATH: make the command available every where
  
        
eclipse:
------------------------

once eclipse is opened it will ask for the "workspace".
workspace -> is the location in the system where the projects are created
provide the workpsace path and  click on launch.


1.create the java project
a java project contains two components:
JRE  -> java library 
src  -> developer has to create/write the code


2.under the project> src>  create the package
package -> package is the folder that contains the related java files.
we create seperate package and maintain our files.

3.Under the package create the class

Steps:
1.create java project
2.create package
3.under package create the Java file..
  
  package --> folder that contains the related java files.ex: validate, ui , request , db , txn, security ...
  
    1.Hello.java 

  
    
Structure of java file:
-----------------------------
  Ex1.java
    
  1.package name
  2.import statements
  3. class name
    class name  == file name 
    one java file should contain only one class 
  4.inside a class we can define  
  instance variables + methods + constructr +
  static variables + static methods + static block...
  
  public class Hello{}


window sSTYLE: com/tcs/ecommerce/consumer/db;
  JAVA style : com.tcs.ecommerce.consumer.db;
  
  
  ex : 
  com.tcs.ecommerce.consumer.db;
  com.tcs.ecommerce.consumer.request;
  com.tcs.ecommerce.consumer.response;
  com.tcs.ecommerce.consumer.util;
  

method or funtion refers the same.

in java the code should be always written inside the method/function.

how to run a java program:
-----------------------------

-> write the main() method inside the class.
if a java file has the main method then only it is eligible for running.
To run a program main() method is mandatory.

syntax of main method:
----------------------
public static void main(String[] args) {


}

 public ->  scope is global so that JRE can access
 static -> defines the method is static
 void -> no return type
 main -> function name or method name
 args -> input arguments 
 


 Steps to run java file:
1.Compilation  
  javac Ex1.java 
  result: Ex1.class is generated[byte code file]

2.Execution 
  java Ex1
  result : <some output>       
 

 
 how to run the prog?
--------------------------
1. compilation
2.execution

-> compilation:
  javac Ex1.java
  
  for compilation we need .java file 
  if compilation is success , it generates .class file 
  
-> execution:
  java Ex1 
  
  for execution we need .class file.
 


 what is a jar?
 --------------------
jar:    [java archive] - exposing the code 
A jar file is nothing but a zip file but contains only .class files.
A jar file contains multiple .class files.

java library. 
contains multiple .class files
large no files to share with the team , then create jar file that contains .class files.
 


 
 Req:
 Dev1 has 500 java files.
 Dev1 has to share with Dev2
 
 dev2 has to use the 500 files but not change the code.
 
 if dev1 shares 500 .java files the dev2 can use and he can modify it. --> not recommended
 if dev1 shares 500 .class files the dev2 can use and he cannot modify it. --> recommended
 if dev1 shares a jar file [ jar file internally contains 500 .class files] to  the dev2 can use and he cannot modify it. --> strongly recommended
 
 
 solution:
 1.Dev1 will compile 500 .java files.
  result : 500 .class are generated
 
 2.Dev1 will create the jar file using 500 .classfiles
 3.Dev1 will share the jar file to Dev2
 4.Dev2 will import the jar file in his project
 


 
 