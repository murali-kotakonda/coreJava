Advantages:
--------------------
-> No need to specify the size
-> we have inbuilt methods for the operations 
-> List is dynamically growing ...
-> Search by position is fast


-> List internally uses array
-> search by content is slow
-> delete an element is slow
-> Insert in between and delete in between is slow


use java.util package

List (interface)- parent class
---------------------

 
Child classes:
------------------
  -ArrayList
  -Vector
  -LinkedList


Raw List:
------------------------
List  names= new ArrayList();   // array list that stores and manages any datatype
List  names= new Vector();   // Vector that stores and manages any datatype
List  names= new LinkedList();   // LinkedList that stores and manages any datatype


ArrayList:
----------------------------
-->List<String> names= new ArrayList<>();  // array list that stores and manages only string
-->List<Integer> names= new ArrayList<>();  // array list that stores and manages only Integer
-->List<Float> nums= new ArrayList<>();   // create arraylist for Float
-->List<Person> persons= new ArrayList<>();   // create arraylist for Person


Vector:
-------------
-->List<String> names= new Vector<>();  // Vector that stores and manages only string
-->List<Integer> names= new Vector<>();  // Vector that stores and manages only Integer
-->List<Float> nums= new Vector<>();   // create Vector for Float
-->List<Person> persons= new Vector<>();   // create Vector for Person

 
LinkedList:
-------------
-->List<String> names= new LinkedList<>();  // LinkedList that stores and manages only string
-->List<Integer> names= new LinkedList<>();  // LinkedList that stores and manages only Integer
-->List<Float> nums= new LinkedList<>();   // create LinkedList for Float
-->List<Person> persons= new LinkedList<>();   // LinkedList Vector for Person



Methods(Arraylist/vector/linkedlist): 
-------------------------------------------

List<String> names = new ArrayList<>();


  - How to add new element ?
    use add() method (adds at last position)
   ex:
   names.add("kumar");
   names.add("shyam");
   names.add("ram");
   names.add("raju");
 
 - How to add new element in between or insert in between ?
     names.add(3,"kumar");
     names.add(2,"shyam");
	 
	   Vector - Slow
     ArrayList - Slow 
     LinkedList - Fast	

  - How to delete all the element?
    names.clear(); 

  - How to search by position?
    ex:
	   get the element at 2nd position
	   String data = names.get(1); // shyam
	     Vector - Fast
       ArrayList - Fast 
       LinkedList - slow	
	      
  - How to search by content?   
    use contains () function
	
	boolean found1 = names.contains("kumar"); //true 
	boolean found2 = names.contains("krishna");//false
	 if(found) {
			System.out.println("  available");
      }else {
			System.out.println( " is not available");
      }
      
	  Vector - slow
    ArrayList - slow 
    LinkedList - slow
    

// returns boolean to check whether list is empty or not
- How to check if list is empty or not?
  boolean content = names.isEmpty(); 

 
 - Find the length?
   int size = names.size();

 - How to delete an element?
   use remove() method
   names.remove("kumar");  

   Vector - slow
   ArrayList - slow 
   LinkedList - slow   



 - How to iterate the list ?
   for(String data : names ){
	   
	   System.out.println(data);
   }
 
 
 
 Req1:  [search by position ]
 --------------
 collection has 500 cities ,get element at 400 position
 
 
 Req2: [search by content]
 --------------------------------
 collection has 500 cities ,check if "Delhi" exists
 
 
//create the arraylist with data 
import java util.Arrays;
List<String> names = Arrays.asList("Cow", "Zebra","Bat", "Apple","Elephant","Mango");
List<Integer> nums = Arrays.asList(10,34,913,34,2,24,365,121,5,2,4,65);



